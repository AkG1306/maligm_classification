{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "eef7962d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn import preprocessing\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e79171b6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "from tensorflow import keras\n",
    "from keras import Sequential\n",
    "from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8c0da645",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 13250 files belonging to 25 classes.\n"
     ]
    }
   ],
   "source": [
    "train_ds = keras.utils.image_dataset_from_directory(\n",
    "    directory = 'train',\n",
    "    labels = 'inferred',\n",
    "    label_mode=\"int\",\n",
    "    batch_size=32,\n",
    "    image_size=(256, 256),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "aa1a83d5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1750 files belonging to 25 classes.\n"
     ]
    }
   ],
   "source": [
    "val_ds = keras.utils.image_dataset_from_directory(\n",
    "    directory = 'val',\n",
    "    labels = 'inferred',\n",
    "    label_mode=\"int\",\n",
    "    batch_size=32,\n",
    "    image_size=(256, 256),\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c7800c1a",
   "metadata": {},
   "outputs": [],
   "source": [
    "def process(image,label):\n",
    "    image  = tf.cast(image/255.,tf.float32)\n",
    "    return image , label\n",
    "\n",
    "train_ds = train_ds.map(process)\n",
    "val_ds = val_ds.map(process)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e1ca2bf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "model = Sequential()\n",
    "\n",
    "model.add(Conv2D(64,kernel_size = (3,3),padding = 'valid',activation = 'relu',input_shape = (256,256,3)))\n",
    "model.add(MaxPooling2D(pool_size = (2,2),strides = 2, padding = 'valid'))\n",
    "\n",
    "model.add(Conv2D(32,kernel_size = (3,3),padding = 'valid',activation = 'relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2),strides = 2, padding = 'valid'))\n",
    "\n",
    "model.add(Conv2D(32,kernel_size = (3,3),padding = 'valid',activation = 'relu'))\n",
    "model.add(MaxPooling2D(pool_size = (2,2),strides = 2, padding = 'valid'))\n",
    "\n",
    "model.add(Flatten())\n",
    "\n",
    "model.add(Dense(128, activation = 'relu'))\n",
    "model.add(Dense(64,activation = 'relu'))\n",
    "model.add(Dense(25,activation = 'softmax'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "68e2018f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_1\"\n",
      "_________________________________________________________________\n",
      " Layer (type)                Output Shape              Param #   \n",
      "=================================================================\n",
      " conv2d_3 (Conv2D)           (None, 254, 254, 64)      1792      \n",
      "                                                                 \n",
      " max_pooling2d_3 (MaxPoolin  (None, 127, 127, 64)      0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " conv2d_4 (Conv2D)           (None, 125, 125, 32)      18464     \n",
      "                                                                 \n",
      " max_pooling2d_4 (MaxPoolin  (None, 62, 62, 32)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " conv2d_5 (Conv2D)           (None, 60, 60, 32)        9248      \n",
      "                                                                 \n",
      " max_pooling2d_5 (MaxPoolin  (None, 30, 30, 32)        0         \n",
      " g2D)                                                            \n",
      "                                                                 \n",
      " flatten_1 (Flatten)         (None, 28800)             0         \n",
      "                                                                 \n",
      " dense_3 (Dense)             (None, 128)               3686528   \n",
      "                                                                 \n",
      " dense_4 (Dense)             (None, 64)                8256      \n",
      "                                                                 \n",
      " dense_5 (Dense)             (None, 25)                1625      \n",
      "                                                                 \n",
      "=================================================================\n",
      "Total params: 3725913 (14.21 MB)\n",
      "Trainable params: 3725913 (14.21 MB)\n",
      "Non-trainable params: 0 (0.00 Byte)\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "d4ff439d",
   "metadata": {},
   "outputs": [],
   "source": [
    "model.compile(optimizer = 'adam',loss = 'sparse_categorical_crossentropy',metrics = ['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f4a96808",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/30\n",
      "415/415 [==============================] - 506s 1s/step - loss: 1.5898 - accuracy: 0.5306 - val_loss: 0.9032 - val_accuracy: 0.8777\n",
      "Epoch 2/30\n",
      "415/415 [==============================] - 9872s 24s/step - loss: 1.3403 - accuracy: 0.6093 - val_loss: 1.2093 - val_accuracy: 0.8629\n",
      "Epoch 3/30\n",
      "415/415 [==============================] - 508s 1s/step - loss: 1.0969 - accuracy: 0.6868 - val_loss: 1.3930 - val_accuracy: 0.8720\n",
      "Epoch 4/30\n",
      "415/415 [==============================] - 504s 1s/step - loss: 0.9239 - accuracy: 0.7414 - val_loss: 1.0615 - val_accuracy: 0.8686\n",
      "Epoch 5/30\n",
      "415/415 [==============================] - 521s 1s/step - loss: 0.7402 - accuracy: 0.7962 - val_loss: 1.1774 - val_accuracy: 0.8851\n",
      "Epoch 6/30\n",
      "415/415 [==============================] - 508s 1s/step - loss: 0.6174 - accuracy: 0.8321 - val_loss: 0.8594 - val_accuracy: 0.8714\n",
      "Epoch 7/30\n",
      "415/415 [==============================] - 508s 1s/step - loss: 0.5830 - accuracy: 0.8473 - val_loss: 1.7575 - val_accuracy: 0.8617\n",
      "Epoch 8/30\n",
      "415/415 [==============================] - 512s 1s/step - loss: 0.5019 - accuracy: 0.8697 - val_loss: 1.4268 - val_accuracy: 0.8566\n",
      "Epoch 9/30\n",
      "415/415 [==============================] - 509s 1s/step - loss: 0.4487 - accuracy: 0.8838 - val_loss: 1.1410 - val_accuracy: 0.8726\n",
      "Epoch 10/30\n",
      "415/415 [==============================] - 507s 1s/step - loss: 0.4175 - accuracy: 0.8911 - val_loss: 1.2044 - val_accuracy: 0.8731\n",
      "Epoch 11/30\n",
      "415/415 [==============================] - 508s 1s/step - loss: 0.4231 - accuracy: 0.8909 - val_loss: 1.5929 - val_accuracy: 0.8691\n",
      "Epoch 12/30\n",
      "415/415 [==============================] - 506s 1s/step - loss: 0.3869 - accuracy: 0.8999 - val_loss: 1.4052 - val_accuracy: 0.8697\n",
      "Epoch 13/30\n",
      "415/415 [==============================] - 505s 1s/step - loss: 0.3745 - accuracy: 0.8993 - val_loss: 1.9633 - val_accuracy: 0.8777\n",
      "Epoch 14/30\n",
      "415/415 [==============================] - 506s 1s/step - loss: 0.4018 - accuracy: 0.8978 - val_loss: 1.3088 - val_accuracy: 0.8720\n",
      "Epoch 15/30\n",
      "415/415 [==============================] - 505s 1s/step - loss: 0.4029 - accuracy: 0.8924 - val_loss: 1.6041 - val_accuracy: 0.8783\n",
      "Epoch 16/30\n",
      "415/415 [==============================] - 9771s 24s/step - loss: 0.3645 - accuracy: 0.8996 - val_loss: 1.5631 - val_accuracy: 0.8663\n",
      "Epoch 17/30\n",
      "415/415 [==============================] - 520s 1s/step - loss: 0.3556 - accuracy: 0.9032 - val_loss: 1.3066 - val_accuracy: 0.8760\n",
      "Epoch 18/30\n",
      "415/415 [==============================] - 531s 1s/step - loss: 0.3280 - accuracy: 0.9094 - val_loss: 1.8453 - val_accuracy: 0.8640\n",
      "Epoch 19/30\n",
      "415/415 [==============================] - 538s 1s/step - loss: 0.3354 - accuracy: 0.9091 - val_loss: 1.6183 - val_accuracy: 0.8891\n",
      "Epoch 20/30\n",
      "415/415 [==============================] - 530s 1s/step - loss: 0.3111 - accuracy: 0.9139 - val_loss: 1.5014 - val_accuracy: 0.8891\n",
      "Epoch 21/30\n",
      "415/415 [==============================] - 531s 1s/step - loss: 0.3205 - accuracy: 0.9117 - val_loss: 2.4787 - val_accuracy: 0.8869\n",
      "Epoch 22/30\n",
      "415/415 [==============================] - 532s 1s/step - loss: 0.3394 - accuracy: 0.9078 - val_loss: 2.1780 - val_accuracy: 0.8823\n",
      "Epoch 23/30\n",
      "415/415 [==============================] - 534s 1s/step - loss: 0.3458 - accuracy: 0.9108 - val_loss: 2.0141 - val_accuracy: 0.8777\n",
      "Epoch 24/30\n",
      "415/415 [==============================] - 530s 1s/step - loss: 0.3166 - accuracy: 0.9122 - val_loss: 1.7142 - val_accuracy: 0.8794\n",
      "Epoch 25/30\n",
      "415/415 [==============================] - 530s 1s/step - loss: 0.3232 - accuracy: 0.9101 - val_loss: 1.5590 - val_accuracy: 0.8909\n",
      "Epoch 26/30\n",
      "415/415 [==============================] - 531s 1s/step - loss: 0.3136 - accuracy: 0.9134 - val_loss: 1.7620 - val_accuracy: 0.8880\n",
      "Epoch 27/30\n",
      "415/415 [==============================] - 534s 1s/step - loss: 0.3186 - accuracy: 0.9125 - val_loss: 1.8558 - val_accuracy: 0.8874\n",
      "Epoch 28/30\n",
      "415/415 [==============================] - 538s 1s/step - loss: 0.2999 - accuracy: 0.9156 - val_loss: 1.3521 - val_accuracy: 0.8977\n",
      "Epoch 29/30\n",
      "415/415 [==============================] - 532s 1s/step - loss: 0.2895 - accuracy: 0.9174 - val_loss: 2.0054 - val_accuracy: 0.8891\n",
      "Epoch 30/30\n",
      "415/415 [==============================] - 531s 1s/step - loss: 0.3245 - accuracy: 0.9125 - val_loss: 1.6127 - val_accuracy: 0.8903\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.History at 0x20a34432210>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.fit(train_ds,epochs = 30, validation_data = val_ds)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df2e1a1c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
